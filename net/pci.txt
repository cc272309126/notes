
PCI 的初始化
archBootCoreInit
	pciBusScan
		Device ID | Vendor ID != 0xffffffff
		pciDevScan
			pciDevPopulate (scan the specified PCI device , read all the information of the single pci device )
		pciIrqRouteSet
		pciDevIrqSet

PCI单个function的配置读取
pciDevPopulate
	pciHeaderGet = 64 * pciRead
	pciBarGet
		pciGetBarConfig
			bar的奇葩读取规定
			1: read old config in bar
			2: write ffffffff
			3: read new config again 
			4: write old config 
			5: if new config != 0xffffffff and new config != 0 /* BAR is implemented */ 
			6: if ((x) & 0x00000001) == 0 --> MEM
					x & ( ~0xf)
			   else
					x & (~0x3)		--> IO
				
				#define BAR_SPACE(x)    ((x) & 0x00000001)
				#define BAR_SPACE_MEM   0
				#define BAR_SPACE_IO    1

				#define BAR_TYPE(x)     (((x) >> 1) & 0x00000003)
				#define BAR_TYPE_32BIT  0
				#define BAR_TYPE_20BIT  1
				#define BAR_TYPE_64BIT  2

				#define BAR_MEM_PREFETCH(x)     (((x) >> 3) & 0x00000001)
				#define BAR_MEM_PREFETCH_YES	1
				#define BAR_MEM_PREFETCH_NO	0

				#define BAR_ADDR_SPACE_IO_MASK	~3
				#define BAR_ADDR_SPACE_MEM_MASK	~0xf

				bar_base是config & mask得到
				bar_size是计算出来的，不是读取出来的。
				64位占用了2个bar寄存器
				bar_config包括64位，IO/MEM, prefetch, 20bitLowMem
				typedef struct sysinfo_bar_config
				{
					uint32_t		is_mem: 1;	/* TRUE if memory mapped	*/
					uint32_t		is_lowmem: 1;	/* TRUE if 20-bits (below 1M)	*/
					uint32_t		is_quad: 1;	/* TRUE if 64-bits		*/
					uint32_t		prefetchable: 1;	/* TRUE if prefetchable		*/
					uint32_t		padding: 28;
				} SYSINFO_BAR_CONFIG;
				
	status & PCI_STATUS_CAPABILITY_LIST
		 Capability Ptr
			PCI_CAP_MSI
			PCI_CAP_MSIX
			PCI_CAP_PCI_EXPRESS
			
		
		PCIE &　PCIE_EXT_CAP_ID_SRIOV
			

PCI manager的功能
pciMgrsInit
	cpu == 0 && ARCH_HAS_DEFAULT_PCI_CONTROLLER 
	pciMgrsInitAll
		threadCreate -- pciMgr 
			SYS_PCI_REQUEST_READ_DATA	1   /* 读data */
			SYS_PCI_REQUEST_WRITE_DATA	2   /* 写data */
			SYS_PCI_REQUEST_READ_ADDR	3   /* 读address, 不可能发生 */
			SYS_PCI_REQUEST_WRITE_ADDR	4   /* 写address, 包含在1,2, 不可能单独发生 */

PCI port写入地址			
address write
bspPciCtrlAddrWrite
	bspPciCtrlWrite(pciCtrlAddrReg[0xCF8] )
		sysOutLong/sysOutWord/sysOutByte
			movl	SP_ARG1(%esp),%edx	--> address reigster 
			movl	SP_ARG2(%esp),%eax	--> address value
			outl	%eax,%dx			--> address value To address reigster 

PCI port读取data
bspPciCtrlDataRead
	bspPciCtrlRead(pciCtrlDataReg[0xCFC] )
		sysInLong/sysInWord/sysInByte
			movl	SP_ARG1(%esp),%edx	--> data register 
			movl	$0,%eax				--> init eax
			inl		%dx,%eax			--> data value add To eax

PCI port写入data			
bspPciCtrlDataWrite
	bspPciCtrlWrite (pciCtrlDataReg[0xCFC] )

PCI 寄存器读写
pciRead = 	bspPciCtrlAddrWrite + bspPciCtrlDataRead		
pciWrite = 	bspPciCtrlAddrWrite + bspPciCtrlDataWrite

PCI config space读写	
pciHeaderGet = 64 * pciRead
pciHeaderPut = 64 * pciWrite


PCI 总线架构主要被分成三部分：
========================================
PCI 设备。符合 PCI 总线标准的设备就被称为 PCI 设备
    PCI 设备同时也分为主设备和目标设备两种，主设备是一次访问操作的发起者，而目标设备则是被访问者。
PCI 总线。PCI 总线在系统中可以有多条，类似于树状结构进行扩展，每条 PCI 总线都可以连接多个 PCI 设备/桥。上图中有两条 PCI 总线。
PCI 桥。当一条 PCI 总线的承载量不够时，可以用新的 PCI 总线进行扩展，而 PCI 桥则是连接 PCI 总线之间的纽带。图中的 PCI 桥有两个，一个桥用来连接处理器、内存以及 PCI 总线，而另外一条则用来连接另一条 PCI 总线。

PCI 总线操作
========================================
PCI 总线操作表示主设备向目标设备所发起的操作请求，最多有16种类型。主要类型有：IO 方式读/写，Memory 方式读/写，Configuration 方式读/写等。

PCI 配制空间
========================================
对于软件开发者来说，该如何对 PCI 设备进行编程呢？PCI 总线标准中定义了一套配置空间寄存器用于读取或者设置 PCI 设备的信息。每个 PCI 设备/桥都有自己的配置空间寄存器。
配置空间共有256字节，设备类型不同，其配置空间的布局也不尽相同。
设备类型的区分可以通过配置空间内的 Header Type 寄存器（0Eh）进行，该寄存器值为 00h 表示当前设备是一个 PCI 设备，01h 表示当前设备是一个 PCI 桥。

配置空间的前64字节是配置空间起始段，它对于每种类型的设备都是相同的。

配置空间寄存器有些是只读的，有些是可写的，下面介绍几个在编程时会用到的寄存器。

Device ID 和 Vendor ID 寄存器
~~~~~~~~~~~~~~~~
这两个寄存器分别存放了设备信息和厂商信息（值在 0x0000 和 0xFFFF 之间，但不能取 0xFFFF），因此软件开发者可以通过读取这两个寄存器的值，并与 0xFFFF 比较，从而判断当前设备是否有效。

Command 和 Status 寄存器
~~~~~~~~~~~~~~~~
Command 寄存器存放了设备的配置信息，比如是否允许 Memory/IO 方式的总线操作、是否为主设备等。Status 寄存器存放了设备的状态信息，比如中断状态、错误状态等。

Header Type 寄存器
这个寄存器前面曾经提过，它定义了设备类型，比如 PCI 设备、PCI 桥等。

Base Address 寄存器
~~~~~~~~~~~~~~~~
这个寄存器有三个作用。
  - 该寄存器存放了 Memory/IO 访问空间的起始地址。
  - 该寄存器存放了 Memory/IO 访问空间的大小，这个数据可以通过下面的方式读出：
        -- 往寄存器里写 0xFFFFFFFF；
        -- 读出寄存器的值，并取反；
        -- 将上一步的值加上1后就是该空间的大小。        
  - 该寄存器定义了这段地址空间的访问类型（Memory 方式还是 IO 方式）。
PCI 设备最多有6个 Base Address 寄存器，而 PCI 桥最多有2个 Base Address 寄存器。

Subordinate Bus Number，Secondary Bus Number 和 Primary Bus Number 寄存器
~~~~~~~~~~~~~~~~
这三个寄存器只在 PCI 桥配置空间中存在，因为 PCI 桥会连接两条 PCI 总线，上行的总线被称为 Primary Bus，下行的总线被称为 Secondary Bus，Primary Bus Number 和 Secondary Bus Number 寄存器分别存储了上行和下行总线的编号，而 Subordinate Bus Number 寄存器则是存储了当前桥所能直接或者间接访问到的总线的最大编号。

PPC 对于 PCI 的支持
========================================
通常 PPC 会提供一个（或更多的）PCI 控制器来连接 PCI 总线，通过 PCI 控制器，CPU 可以发起 Configuration 读写操作来访问所连接的所有 PCI 设备/桥的配置空间。每个 PCI 设备/桥都会用（总线号，设备号，功能号）这一组合来进行编号，因此在 PCI 控制器中输入设备对应的（总线号，设备号，功能号）就能寻址到具体的 PCI 设备/桥。以 PPC8548 为例，它提供了两个寄存器来实现 Configuration 操作，分别是 CFG_ADDR 和 CFG_DATA 寄存器，如果想对某个设备发起读/写操作，则首先将该设备的（总线号，设备号，功能号）写入 CFG_ADDR 中，这代表寻址一个具体的 PCI 设备，同时在 CFG_ADDR 中写入需要操作的配置空间寄存器的编号，最后从 CFG_DATA 中读取/写入相应的数据即可。


Linux 内核对 PCI 的支持
========================================
Linux 内核（2.6 版本）在初始化之初就对所有 PCI 设备进行了扫描并且配制，具体操作分为下面几个步骤。


PCI 相关数据结构
========================================
Linux 提供了三类数据结构用以描述 PCI 控制器、PCI 设备以及 PCI 总线。

PCI 控制器
~~~~~~~~~~~~~~~~
PCI 控制器用 pci_controller 结构来描述，它有以下几个主要的属性：
index：该属性标志 PCI 控制器的编号。
next：该属性指向下一个 PCI 控制器，通过 next 属性，PCI 控制器可以形成一个单向链表。
first_busno：该属性标志了连接在该控制器上第一条总线的编号。
last_busno：该属性标志了连接在该控制器上最后一条总线的编号。
ops：该属性标志了当前 PCI 控制器所对应的 PCI 配制空间读写操作函数。
io_space：该属性标志了当前 PCI 控制器所支持的 IO 地址空间。
mem_space：该属性标志了当前 PCI 控制器所支持的 Memory 地址区间。
cfg_addr：该属性标志了当前 PCI 控制器发起 Configuration 访问方式时所需要写入的地址空间。
cfg_data：该属性标志了当前 PCI 控制器发起 Configuration 访问方式时所需要读写的数据空间。
bus：该属性标志了当前 PCI 控制器所连接的 PCI 总线，它对应的数据结构是 pci_bus。

PCI 总线
~~~~~~~~~~~~~~~~
PCI 总线用 pci_bus 结构来描述，它有以下几个主要的属性：
parent：可通过该属性索引到上层 PCI 总线。
self：该属性标志了连接的上行 PCI 桥（对应的数据结构是 pci_dev）。
children：该属性标志了总线连接的所有 PCI 子总线链表。
devices：该属性标志了总线连接的所有 PCI 设备链表。
ops：该属性标志了总线上所有 PCI 设备的配制空间读写操作函数。
number：该属性标志了当前 PCI 总线的编号。
primary：该属性标志了 PCI 上行总线编号。
secondary：该属性标志了 PCI 下行总线编号。
subordinate：该属性标志了能够访问到的最大总线编号。
resource：该属性标志了 Memory/IO 地址空间。

PCI 设备
~~~~~~~~~~~~~~~~
PCI 设备用 pci_dev 结构来描述，它有以下几个主要的属性：
global_list：Linux 定义了一个全局列表来索引所有的 PCI 设备，该属性标志了这个全局列表的首指针。
bus：该属性标志了当前设备所在的 PCI 总线（对应的数据结构是 pci_bus）。
devfn：该属性标志了设备编号和功能编号。
vendor：该属性标志了供应商编号。
device：该属性标志了设备编号。
driver：该属性标志了设备对应的驱动代码（对应的数据结构是 pci_driver）。
irq：该属性标志了中断号。
resource：该属性标志了 Memory/IO 地址区间。

内核里的 PCI 数据结构图
========================================
当 Linux 内核在做 PCI 初始化工作时，它会根据图 4 建立一个由 pci_controller、pci_bus 和 pci_dev 三者组成的一个组织结构图。根据这个结构，软件开发者可以很方便的通过 PCI 控制器索引到每个 PCI 设备或者 PCI 总线。


PCI 控制器初始化
========================================
当一个支持 PCI 的内核映像开始运行时，它会在系统初始化时对 PCI 进行配置。

内核从 start_kernel() 函数处开始进行系统初始化，一直执行到 mpc85xx_setup_hose() 函数处便是配制 PCI 控制器以及连接在该控制器上所有设备的过程。
所有这些函数的定义处都加上了 __init 的符号类型，由 __init 修饰的函数表明在链接最终的内核映像时，这些函数将被放在一个特殊的初始化代码段中（.init.text，可以在链接文件 vmlinux.lds.S 中找到相关的段描述），这个初始化代码段会随着内核初始化完成而被释放。
在这一步骤中，内核会对它所支持的所有 PCI 控制器进行初始化工作，每个 PCI 控制器都对应一个 pci_controller 属性的变量，初始化工作会在这些变量中设置 Memory/IO 访问空间的起始地址以及结束地址、设置当前 PCI 控制器所连接的第一条和最后一条 PCI 总线编号等等。

PCI 自动扫描
========================================
系统如何知道当前连接了多少 PCI 设备？有多少根 PCI 总线？每个 PCI 设备的访问空间如何配置？等等。这些都得靠 PCI 自动扫描来完成。PCI 自动扫描主要做下面的工作：
- 扫描 PCI 总线，识别 PCI 总线上的所有设备。
- 对于连接在 PCI 总线上的所有 PCI 桥进行总线编号。
- 对于连接在 PCI 总线上的所有 PCI 设备和 PCI 桥进行 Memory/IO 访问空间的配置。

识别 PCI 总线上的设备
- PCI 总线扫描的原理是从总线 0 扫描到总线 255，对于每条总线，系统都会扫描所有（总线号，设备号，功能号），通过 Configuration 方式读出每个设备的 Device ID 和 Vendor ID 寄存器，如果这两个寄存器的值是个有效值（非 0xFFFF），则说明当前设备是个有效的 PCI 设备/桥。进而再读取该设备的 Header Type 寄存器，如果该寄存器为 1，则表示当前设备是 PCI 桥，否则是 PCI 设备。

- 对所有 PCI 总线进行编号
PCI 桥如何知道它所连接的 PCI 总线情况呢？这就需要对 PCI 桥进行总线编号。前面介绍过 PCI 桥提供了 Primary Bus Number、Secondary Bus Number 和 Subordinate Bus Number 三个寄存器用于标志该桥所连接的 PCI 总线，下面通过一个示例来说明内核对于 PCI 总线是如何进行编号的。

示例
========================================
系统运行初始，Bus A 为 0，通过上面的 PCI 总线扫描得到连接在 Bus A 上的 PCI 桥
下面开始设置 Bridge 1 的 Bus 寄存器。将 Primary Bus Number 寄存器设置成 Bus A 的编号，即 0。将 Secondary Bus Number 寄存器设置成 Bus B 的编号，它的值等于（Bus A + 1），也就是 1。由于暂时无法知道该桥所能访问的所有下行总线数目，Subordinate Bus Number 寄存器暂时设置成 0xFF。
当扫描完所有 Bus A 上所有（设备号，功能号）后，开始扫描 Bus B，Bus B 的编号在扫描完 Bus A 后已经得到，为 1。Bus B 的扫描方法同步骤（1），先扫描出 Bus B 上的 PCI 桥（即图中的 Bridge 2），然后配置 Primary Bus Number 寄存器为 1，Secondary Bus Number 寄存器为 2，而 Subordinate Bus Number 寄存器依然为 0xFF。
Bus B 扫描完后得到 Bus C 的编号，为2。下面开始扫描 Bus C，因为 Bus C 上没有 PCI 桥，于是在扫描完其它（设备号，功能号）后，Bus C 的扫描结束。
由于 Bridge 2 所能访问到的最大 Bus 编号是 2，因此重新设置 Bridge 2 的 Subordinate Bus Number 寄存器为 2。
由于 Bridge 1 所能访问到的最大 Bus 编号也是 2，因此重新设置 Bridge 1 的 Subordinate Bus Number 寄存器为 2。
总线编号结束。

配置访问空间
========================================
当系统需要访问 PCI 设备时，它需要产生 Configuration、Memory 或者 IO 的读写操作，对于 Memory/IO 的访问方式来说，它们需要定义一个地址范围，落在这个地址范围的操作会被认为是相应的 Memory/IO 的读写操作。
通常 PCI 设备提供了最多6组 Base Address 寄存器，在 PCI 总线扫描时，每当扫描出一个可用的 PCI 设备后，会对该设备的 Base Address 寄存器进行 Memory/IO 访问空间的配置。
而对于 PCI 桥来说，它只提供了2组 Base Address 寄存器，当 PCI 总线扫描出一个 PCI 桥后，也会对该桥的 Base Address 寄存器进行 Memory/IO 访问空间的配置。

需要注意的是，在构建系统之初，需要明确当前系统的地址范围，划分出特定的物理地址作为 PCI Memory 或者 PCI IO 空间，在给 PCI 设备/桥进行访问空间配置时，就是取事先约定的地址空间中的某段地址进行配置，所有设备/桥的访问地址不能冲突。定义系统的 Memory/IO 访问空间是在 mpc85xx_setup_hose() 函数中提供的（位于 arch/ppc/syslib/ppc85xx_setup.c 中）。

PCI 设备和总线初始化
========================================
这一操作在 pcibios_init() 函数中进行（位于 arch/ppc/kernel/pci.c 中）。它会在前面操作结束后，对 PCI 总线和 PCI 设备分别分配 pci_bus 和 pci_dev 类型的节点，并建立如所示的组织结构关系。

Linux 的 PCI 设备初始化
========================================
Linux 会将 PCI 的相关信息保存在一个文件中，从而方便用户的查阅。这一文件的创建就在 pci_proc_init() 函数中进行（位于 drivers/pci/proc.c 中）。首先它在 /proc/bus 目录下建立起一个名为 pci 的目录，然后在该目录中建立一个名为 devices 的文件，该文件中存放了当前内核所配置的所有 PCI 设备的信息。
我们通常会使用 lspci 命令来查看系统中的 PCI 设备，这条命令就是从 devices 文件中解析相应的字段来显示的。




本文主要描述linux kernel进行pci总线扫描，linux kernel代码基于版本2.6.37
1. 域
最先需要说明一个概念--域
百度百科：域之原义指地方的范围，后逐渐演变为数学、生物、科技等学科的某类单位的分类词语。
域英文叫DOMAIN (a set of websites on the Internet which end with the same group of letters,for exemple'.com','org'-------《牛津高阶英汉双解词典》）
出现在本文中，意义要窄一些，认为域是一个使用同一编址方式的范围。
比如：
pci域，使用pci地址进行寻址
x86域，使用x86物理地址进行寻址
域有主导者，访问都通过它进行
pci域，主导者是pci root，如果需要访问一个pci设备，就需要通过主导者pci root进行，它能识别的地址是pci地址
x86域，主导者是x86 cpu，如果需要访问一个内存，就需要通过主导者x86 cpu进行，它能识别的地址是x86物理地址
如果引申一下有物理地址，线性地址，逻辑地址，虚拟地址，在另一篇文章中有提到。
本文中将的是pci域，所以所有的寻址都是使用pci地址

2. pci总线
简单的介绍一下pci，有意愿的话，可以认真看看pci协议，到处都有得下，英文的。
2.1 pci设备
pci有三种设备，有一种叫cardbus没接触过不提，所以认为两种，普通设备和桥设备
普通设备的功能是系统需要的具体功能，具体功能最终也会归到数据传输，数据处理上面去。
如果一个pci设备是这么组成的
pci总线接口 -- 内存 -- 网络数据处理器 -- 网络接口
网络数据通过网络接口进到网络数据处理器，处理后放到pci设备的内存上，再通过pci总线接口将数据发送到pci总线上，于是另一个pci设备就能够获取网络数据，反方向就是发送网络数据
很明显，这个pci设备就是一个pci网卡
类似的
pci总线接口 -- 内存 -- 视频数据处理器 -- 视频接口
一个pci显卡
pci总线接口 -- 内存 -- 音频数据处理器 -- 音频接口
一个pci声卡

桥设备的功能是扩展pci总线，根据pci协议，一个总线上支持32个dev，每个dev支持8中功能，数量不够多，扩展功能是必要的。
命令lspci -t查看拓扑
-[0000:00]-+-00.0
           +-02.0
           +-1b.0
           +-1c.0-[20]--
           +-1c.1-[3f]----00.0
           +-1d.0
           +-1d.1
           +-1d.2
           +-1d.3
           +-1d.7
           +-1e.0-[05]----04.0
           +-1f.0
           +-1f.1
           \-1f.2
pci总线0下有多个设备
普通设备00.0, 02.0, 1b.0, 1d.0-7, 1f.0-2
桥设备1c.0, 1c.1, 1e.0
桥1c.0扩展总线20, 1c.1扩展总线3f, 1e.0扩展总线05
总线20下无设备，总线3f下有设备3f:00.0，总线05下有设备05:04.0

2.2 pci配置空间
pci是一种总线，特点是灵活可配置，因为它有一个专门的区域叫配置空间。
配置空间通过io总线访问，x86是0xCF8,0xCFC，一个是控制端口一个是数据端口
命令可查看
sh-4.1# cat /proc/ioports 
...
0cf8-0cff : PCI conf1
...
桥设备和普通设备的配置空间内容不一样
桥设备的配置空间需要说明pci总线的拓扑，内存映射的地址范围等等
普通设备的配置空间需要说明该设备内存映射的地址范围，pci的中断号等等
讲配置空间的网上有很多很优秀的文章，不贴过来了

2.3 pci内存映射空间
考虑一个pci声卡
pci总线接口 -- 内存 -- 音频数据处理器 -- 音频接口
音频数据处理器处理完的数据存放到pci设备的内存中，如何在pci总线上访问到这块内存从而获取其中的音频数据呢？
前面说pci配置空间说明内存映射空间地址范围，即将这块内存映射到pci总线域的哪块地址，这样在pci总线域中访问这块地址就是访问这块内存
内存映射空间一般有一个或者多个，看一个真实的显卡
00:02.0 VGA compatible controller: Intel Corporation 82945G/GZ Integrated Graphics Controller (rev 02) (prog-if 00 [VGA controller])
        Subsystem: Hewlett-Packard Company Device 3010
        Flags: bus master, fast devsel, latency 0, IRQ 16
        Memory at e0400000 (32-bit, non-prefetchable) [size=512K]
        I/O ports at 20c0 [size=8]
        Memory at d0000000 (32-bit, prefetchable) [size=256M]
        Memory at e0480000 (32-bit, non-prefetchable) [size=256K]
        Expansion ROM at <unassigned> [disabled]
        Capabilities: <access denied>
        Kernel driver in use: i915
        Kernel modules: i915
这里面的信息都是从配置空间获取的，可以看到有4个内存映射空间
        Memory at e0400000 (32-bit, non-prefetchable) [size=512K]
        I/O ports at 20c0 [size=8]
        Memory at d0000000 (32-bit, prefetchable) [size=256M]
        Memory at e0480000 (32-bit, non-prefetchable) [size=256K]
只是第二个有些特殊是io port的映射区间，另外的三个都是真实的内存映射区间，第三个对应的就是显卡上的256MB显存

3. 扫描过程
经过前面内容，可以猜想pci设备的初始化流程应该是
a. 通过io总线配置pci配置空间
b. 通过io总线读取pci配置空间信息，获取内存映射空间的映射地址信息
c. 通过读写内存映射空间实现数据传输
看上去显得很简单，但是简单的说就是这么简单
如果只有一个总线，下面又只挂了一个pci设备，那么我认为上面的流程及足够了，上面的流程也是pci驱动初始化pci设备的基本流程。
由于大量的pci桥和pci普通设备有可能出现在pci总线上，所以实际情况比这个复杂
3.1 BIOS pci 扫描
最先进行pci扫描的是x86上的BIOS，扫描的结果是各个pci普通设备和pci桥都被配置完成，但是这种配置有可能是不能用的。
原因需要回到域的概念，简单的考虑，x86系统中存在两个域，x86域和pci域，由于x86系统的特殊性，两个域被设计成对等映射的关系。
也就是说，虽然x86域中使用x86地址进行访问，pci域中使用pci地址进行访问，但是两者对同一个实体的地址是相等的。这样带来的问题是两个域的地址不能重合，需要分开。
命令cat /proc/iomem可查看
00000000-00000fff : reserved
00001000-0009fbff : System RAM
0009fc00-0009ffff : reserved
000a0000-000bffff : Video RAM area
000c0000-000c7fff : Video ROM
000cd400-000e7fff : pnp 00:0e
000e8000-000fffff : reserved
  000f0000-000fffff : System ROM
00100000-7f7c82ff : System RAM
  00400000-007aca75 : Kernel code
  007aca76-00a1cf6f : Kernel data
  00aa8000-00c2b8bf : Kernel bss
7f7c8300-7fffffff : reserved
80000000-801fffff : PCI Bus 0000:20
80200000-803fffff : PCI Bus 0000:20
80400000-805fffff : PCI Bus 0000:3f
80600000-806fffff : PCI Bus 0000:05
  80600000-8061ffff : 0000:05:04.0
d0000000-dfffffff : 0000:00:02.0
e0400000-e047ffff : 0000:00:02.0
e0480000-e04bffff : 0000:00:02.0
e04c0000-e04c3fff : 0000:00:1b.0
  e04c0000-e04c3fff : ICH HD audio
e04c4000-e04c43ff : 0000:00:1d.7
  e04c4000-e04c43ff : ehci_hcd
e0500000-e07fffff : PCI Bus 0000:3f
  e0500000-e050ffff : 0000:3f:00.0
    e0500000-e050ffff : tg3
e0800000-e0afffff : PCI Bus 0000:05
  e0a00000-e0a000ff : 0000:05:04.0
    e0a00000-e0a000ff : r8169
f0000000-f3ffffff : reserved
  f0000000-f3ffffff : pnp 00:0e
    f0000000-f1ffffff : PCI MMCONFIG 0000 [bus 00-1f]
fec00000-fed3ffff : reserved
  fec00000-fec003ff : IOAPIC 0
  fec01000-fed3ffff : pnp 00:0e
fed45000-ffffffff : reserved
  fee00000-fee00fff : Local APIC
后面一段基本都是pci设备，前面一段基本都是ram，两者没有重合部分
回到BIOS配置可能不可用的问题，如果linux kernel将系统内存也安排到了BIOS配置pci的地址区域，出现重合，系统就乱了。

3.2 kernel扫描
既然BIOS配置可能不可用，那么只能kernel自己重新扫一次，合理安排pci地址空间和x86空间的地址了。
内核有个配置选项与此相关
CONFIG_PCI_BIOS
CONFIG_PCI_MMCONFIG
CONFIG_PCI_DIRECT
网上有相关说明，不贴了
3.2.1 扫描流程
cat System.map | grep pci | grep __initcall 
ffffffff8170c818 t __initcall_pci_reboot_init1
ffffffff8170c8c8 t __initcall_pcibus_class_init2
ffffffff8170c8d0 t __initcall_pci_driver_init2
ffffffff8170c918 t __initcall_acpi_pci_init3
ffffffff8170c940 t __initcall_pci_arch_init3
ffffffff8170c9b8 t __initcall_pci_slot_init4
ffffffff8170c9d0 t __initcall_acpi_pci_root_init4
ffffffff8170c9d8 t __initcall_acpi_pci_link_init4
ffffffff8170ca48 t __initcall_pci_subsys_init4
ffffffff8170caf0 t __initcall_pcibios_assign_resources5
ffffffff8170cb18 t __initcall_pci_apply_final_quirks5s
ffffffff8170cb28 t __initcall_pci_iommu_initrootfs
ffffffff8170ced0 t __initcall_pci_proc_init6
ffffffff8170ced8 t __initcall_pcie_portdrv_init6
ffffffff8170cfa8 t __initcall_serial8250_pci_init6
ffffffff8170cfd0 t __initcall_hsu_pci_init6
ffffffff8170d010 t __initcall_ide_scan_pcibus6
ffffffff8170d410 t __initcall_pci_resource_alignment_sysfs_init7
ffffffff8170d418 t __initcall_pci_sysfs_init7
ffffffff8170d440 t __initcall_pci_mmcfg_late_insert_resources7
这些都是在kernel启动过程中会执行的pci相关函数，有些明显不是通用的可以忽略
整个扫描流程分为两部分 扫描设备 和 分配资源
3.2.1.1 扫描设备
从主桥开始扫
pcibios_scan_root(0)
>>> pci_scan_bus_parented()
    >>> pci_scan_child_bus()
        >>> for (devfn = 0; devfn < 0x100; devfn += 8)
pci_scan_slot(bus, devfn);
前面有说一个总线下支持32个dev，每个dev支持8个fn，这里就是扫描总线下所有的dev
所有的dev有普通pci设备，还有pci桥
pci桥会扩展出另一个总线号，其下可能挂有其他设备，所以还需要扫描找到的pci桥
            >>> pci_scan_single_device()
                >>> pci_scan_device()
                    >>> pci_setup_device()
                        >>> pci_read_irq()
                        >>> pci_read_bases()
                            >>> __pci_read_base()
                                >>> pci_size()
获取pci设备信息，中断号，内存映射区域大小和地址等等
                >>> pci_device_add()
                    >>> list_add_tail(&dev->bus_list, &bus->devices)
扫到的设备全存放在bus->devices链表中，后面会有很多扫描依赖这个链表
常见的比如：list_for_each_entry(dev, &bus->devices, bus_list)
就是循环该bus下所有pci设备
        >>> pci_scan_bridge()
            >>> pci_find_bus()
            >>> pci_add_new_bus()
桥扩展出来的总线给一个新的总线号
            >>> pci_scan_child_bus()
递归扫描新扫到的pci桥
这样是扫描到桥就往深处走，称深度优先扫描，将所有的pci设备扫描完毕，并获取内存映射区域信息

3.2.1.2 分配资源
从主桥开始
__pci_bus_assign_resources()
>>> pbus_assign_resources_sorted()
    >>> __dev_sort_resources()
        >>> pdev_sort_resources()
            >>> pci_resource_alignment()
                >>> resource_alignment()
                    >>> resource_size()
将bus下所有dev所需要占用的资源都放入一个链表上--head
    >>> __assign_resources_sorted()
        >>> assign_requested_resources_sorted()
            >>> resource_size()
            >>> pci_assign_resource()
                >>> pci_resource_alignment()
                >>> __pci_assign_resource()
                    >>> pci_bus_alloc_resource()
                    ### allocate a resource from a parent bus
从bus所含资源中给链表head上所注明资源分配空间
                        >>> allocate_resource()
                            >>> find_resource()
在制定范围内寻找合适的空间[min, max]
min = (res->flags & IORESOURCE_IO) ? PCIBIOS_MIN_IO : PCIBIOS_MIN_MEM;
max = PCIBIOS_MAX_MEM_32;
匹配方式可看resource_clip(),移动最小匹配
                            >>> __request_resource()
分配
                    >>> request_resource_conflict()
                        ### request and reserve an I/O or memory resource
                        >>> __request_resource()
                    >>> pci_update_resource()
                        >>> pci_resource_bar()
更新配置空间
        >>> adjust_resources_sorted()
            >>> 
>>> __pci_bus_assign_resources()
### recursion
>>> pci_setup_bridge()
更新桥的配置空间，桥所包含地址范围
    >>> __pci_setup_bridge()
        >>> pci_setup_bridge_io()
            >>> res = bus->resource[0]
            >>> pcibios_resource_to_bus(bridge, &region, res)
            ### write to io base and limit
        >>> pci_setup_bridge_mmio()
            >>> res = bus->resource[1]
            >>> pcibios_resource_to_bus(bridge, &region, res)
            ### write to mem base and limit
        >>> pci_setup_bridge_mmio_pref()
            >>> res = bus->resource[2]
            >>> pcibios_resource_to_bus(bridge, &region, res)
            ### write to pref mem base and limit

下面只是列出较具体流程，代码就不贴了
3.2.2 pci_reboot_init
>>> dmi_check_system(pci_reboot_dmi_table)
只有apple相关产品会做一些修正，不关心

3.2.3 pcibus_class_init
>>> class_register(&pcibus_class)
    >>> release_pcibus_dev()
        >>> pci_bus_remove_resources()
注册pci class

3.2.4 pci_driver_init()
>>> bus_register(&pci_bus_type)
    >>> bus_register(&pci_bus_type)
        >>> pci_bus_match()
            >>> pci_match_device()
                >>> pci_match_id()
                    >>> pci_match_one_device()
                    ### id->vendor == dev->vendor, id->device == dev->device
        >>> pci_uevent()
            >>> add_uevent_var()
            ### add key value string to the environment buffer
        >>> pci_device_probe()
            >>> pci_match_device()
            >>> pci_call_probe()
                >>> local_pci_probe()
                    >>> ddi->drv->probe(ddi->dev, ddi->id)
        >>> pci_device_remove()
            >>> drv->remove(pci_dev)
        >>> pci_device_shutdown()
            >>> drv->shutdown(pci_dev)
            >>> pci_msi_shutdown(pci_dev)
            >>> pci_msix_shutdown(pci_dev)
        >>> pci_dev_attrs
        >>> pci_bus_attrs
            >>> bus_rescan_store()
                >>> b = pci_find_next_bus()
                >>> pci_rescan_bus(b)
注册pci驱动，但是这里注意pci_rescan_bus(b)在pci hotplug中是很有用的，另一篇文章有提到

3.2.5 acpi_pci_init()
从ACPI获取信息，ACPI还是很复杂的，可以简单看作一堆表示系统相关信息的表

3.2.6 pci_arch_init()
>>> pci_direct_probe()
    >>> request_region(0xCF8, 8, "PCI conf1")
这里就是保留io总线访问配置空间的资源，0xCF8 0xCFC
>>> pci_mmcfg_early_init()
    >>> __pci_mmcfg_init()
        >>> acpi_sfi_table_parse(ACPI_SIG_MCFG, pci_parse_mcfg)
        ### mmconfig address is coming from ACPI table
MMCONFIG对于访问pcie设备配置空间很有作用，因为PCI的配置空间是256，而PCIE的配置空间是4K，多出的部分io总线访问不了，需要mmconfig进行访问
            >>> pci_parse_mcfg()
                >>> pci_mmconfig_add()
        >>> pci_mmcfg_reject_broken()
            >>> is_mmconf_reserved()
        >>> pci_mmcfg_arch_init()
>>> x86_init.pci.arch_init()
    >>> pci_acpi_init()
    ### about pci irq
>>> pci_pcbios_init()
    ​>>> pci_find_bios()
    ### find BIOS32 0xe0000 - 0xfffff
>>> pci_direct_init()
    ### raw_pci_ops = &pci_direct_conf1 
>>> dmi_check_pciprobe()
>>> dmi_check_skip_isa_align()

3.2.7 pci_slot_init()
>>> pci_slots_kset = kset_create_and_add("slots", NULL, &pci_bus_kset->kobj)

3.2.8 acpi_pci_root_init()
>>> acpi_hest_init()
>>> pci_acpi_crs_quirks()
>>> acpi_bus_register_driver(&acpi_pci_root_driver)
### about irq

3.2.9 acpi_pci_link_init()
>>> acpi_bus_register_driver(&acpi_pci_link_driver)
### about irq

3.2.10 pci_subsys_init()
>>> pci_legacy_init()
    >>> pci_root_bus = pcibios_scan_root(0)
        >>> bus = pci_scan_bus_parented(NULL, busnum, &pci_root_ops, sd)
            >>> b = pci_create_bus(parent, bus, ops, sysdata)
            >>> b->subordinate = pci_scan_child_bus(b)
            ### ...
    >>> pci_bus_add_devices(pci_root_bus)
        >>> pci_bus_add_device()
        ### insert newly discovered PCI devices
        >>> pci_bus_add_child()
        ### add a child bus
>>> pcibios_fixup_peer_bridges()
>>> x86_init.pci.init_irq()
>>> pcibios_init()
    >>> pcibios_resource_survey()
        >>> pcibios_allocate_bus_resources()
        ### for PCI_BRIDGE_RESOURCES, for bridge
            >>> pci_claim_resource()
                >>> pci_find_parent_resource()
                >>> request_resource_conflict()
                    >>> __request_resource()
            >>> pcibios_allocate_bus_resources()
            ### recursion
        >>> pcibios_allocate_resources()
        ### from PCI_STD_RESOURCES to PCI_STD_RESOURCE_END
            >>> pci_claim_resource()
        >>> e820_reserve_resources_late()
        >>> ioapic_insert_resources()
            >>> insert_resource(&iomem_resource, ioapic_resources)

3.2.11 pcibios_assign_resources()
>>> pci_assign_unassigned_resources()
    >>> __pci_bus_size_bridges()
        >>> __pci_bus_size_bridges()
        >>> pci_bridge_check_ranges()
        >>> pbus_size_io()
        >>> pbus_size_mem()
    >>> __pci_bus_assign_resources()
        >>> pbus_assign_resources_sorted()
        >>> __pci_bus_assign_resources()
        >>> pci_setup_bridge()
            >>> __pci_setup_bridge()
                >>> pci_setup_bridge_io()
                >>> pci_setup_bridge_mmio()
                >>> pci_setup_bridge_mmio_pref()
    >>> pci_enable_bridges()
    >>> pci_bus_dump_resources()

3.3 kernel扫描关键的四个函数
3.3.1 pci_scan_child_bus()
>>> pci_scan_slot()
### scan a PCI slot on a bus for devices
    >>> pci_scan_single_device()
        >>> pci_get_slot()
        ### check devfn is exist or not under bus
        >>> pci_scan_device()
        ### check VID and DID to decide devfn is exist or not
            >>> alloc_pci_dev()
            >>> pci_setup_device()
                >>> pci_fixup_device(pci_fixup_early, dev)
                ### do early fixup here
                >>> pci_read_bases()
                ### read pci bar 0 - 5
                    >>> __pci_read_base()
                    ### read a pci bar for region and size
        >>> pci_device_add()
            >>> pci_fixup_device(pci_fixup_header, dev)
            >>> list_add_tail(&dev->bus_list, &bus->devices)
            ### scan all devices under one bus, then add them (dev->bus_list) to bus->devices
>>> pci_iov_bus_range()
>>> pcibios_fixup_bus()
    >>> pci_read_bridge_bases()
        >>> pci_bus_remove_resources(child)
>>> pci_read_bridge_io(child)
>>> pci_read_bridge_mmio(child)
>>> pci_read_bridge_mmio_pref(child)
        >>> pci_bus_add_resource()
>>> pci_scan_bridge()
### find a bridge, then want to find bus under the bridge in system.
    >>> pci_find_bus()
    ### find the bus
        >>> pci_do_find_bus()
            >>> pci_do_find_bus()
            ### recursion
    >>> pci_add_new_bus()
    ### do not find the bus, so add a new one
    >>> pci_scan_child_bus()
    ### recursion
    >>> pci_fixup_parent_subordinate_busnr()

3.3.2 pci_bus_add_devices()
>>> pci_bus_add_device()
>>> pci_bus_add_devices()
### recursion
>>> pci_bus_add_child()

3.3.3 __pci_bus_size_bridges()
### if it is bridge, recursion
>>> __pci_bus_size_bridges()
### for bridge
>>> pci_bridge_check_ranges()
### check support 64bit or not
>>> pbus_size_io()
### calc io resource of all devices under this bus
>>> pbus_size_mem()
### calc mem resource of all devices under this bus

3.3.4 __pci_bus_assign_resources()
>>> pbus_assign_resources_sorted()
    >>> __dev_sort_resources()
        >>> pdev_sort_resources()
            >>> pci_resource_alignment()
                >>> resource_alignment()
                    >>> resource_size()
    >>> __assign_resources_sorted()
        >>> assign_requested_resources_sorted()
            >>> resource_size()
            >>> pci_assign_resource()
                >>> pci_resource_alignment()
                >>> __pci_assign_resource()
                    >>> pci_bus_alloc_resource()
                    ### allocate a resource from a parent bus
                        >>> allocate_resource()
                            >>> find_resource()
                            >>> __request_resource()
                    >>> request_resource_conflict()
                        ### request and reserve an I/O or memory resource
                        >>> __request_resource()
                    >>> pci_update_resource()
                        >>> pci_resource_bar()
        >>> adjust_resources_sorted()
            >>> 
>>> __pci_bus_assign_resources()
### recursion
>>> pci_setup_bridge()
    >>> __pci_setup_bridge()
        >>> pci_setup_bridge_io()
            >>> res = bus->resource[0]
            >>> pcibios_resource_to_bus(bridge, &region, res)
            ### write to io base and limit
        >>> pci_setup_bridge_mmio()
            >>> res = bus->resource[1]
            >>> pcibios_resource_to_bus(bridge, &region, res)
            ### write to mem base and limit
        >>> pci_setup_bridge_mmio_pref()
            >>> res = bus->resource[2]
            >>> pcibios_resource_to_bus(bridge, &region, res)
            ### write to pref mem base and limit

4. 总结
linux pci 扫描流程
a. BIOS先扫描，但是扫描的结果可能不能直接用。
b. linux kernel扫描分两步，扫描设备和分配资源。
c. 扫描设备会从主桥开始，按照深度优先方式扫描所有设备，如果遇到一个桥设备则扩展一个总线号，并对该总线进行扫描。
d. 扫描会获取pci总线拓扑和各个设备所需要的资源信息。
e. 分配资源也从主桥开始，按照深度优先方式扫描所有设备，并按需为设备分配资源和更新配置信息。
f. 桥根据其下设备所分配的资源更新配置范围，以供pci总线路由。
g. x86域的地址资源和pci域的地址资源是对等映射，所以分配需考虑到两者不能冲突。


arch_initcall(pci_direct_init);
arch_initcall(pci_pcbios_init);
    raw_pci_ops = pci_bios_access
    pci_probe |= PCI_BIOS_SORT;
    pci_bios_present = 1;
        
1: 从pci bios 扫描
2: 从acpi扫描

pci_legacy_init
    pcibios_scan_root
        pci_scan_bus(busnum, &pci_root_ops, NULL);
            pci_scan_bus_parented(NULL, busnum, pci_root_ops, NULL);
                pci_scan_child_bus
                    pci_scan_slot
                        pci_scan_single_device
                            pci_scan_device
                                pci_setup_device
                                    "%04x:%02x:%02x.%d"
                            pci_scan_msi_device
                                pci_find_capability(dev, PCI_CAP_ID_MSIX)
                                pci_find_capability(dev, PCI_CAP_ID_MSI)
                    pcibios_fixup_bus
                    pci_scan_bridge
                        pci_alloc_child_bus
                        pci_scan_child_bus

链表管理结构



pcie设备的配置空间相对于pci设备从256增大到4K，只有前256可以通过ioport方式读写，后面的内容则需要从MCONF空间读写。
可通过cat /proc/iomem查看MCONF空间地址，我设备的MCONF空间定义为0x80000000.

echo 1 > /sys/bus/pci/devices/0000:00:1e.0/rescan

pcibios_assign_resources
    /* Don't touch classless devices and host bridges */
    Don't touch IDE controllers and I/O ports of video cards!
    /*
     *  We shall assign a new address to this resource, either because
     *  the BIOS forgot to do so or because we have decided the old
     *  address was unusable for some reason.
     */  
    pci_assign_resource
        pci_bus_alloc_resource
            allocate_resource
                find_resource
                __request_resource

