
flow control
congestion control

slow start
congestion window - cwnd 
1 -- RTT(round trip time), receive ack -- 2^n

congestion avoidance -- jacobon
timeout / 3 same acks
 
slow start thresh(ssthresh)  = cwnd/2
timeout, cwnd = 1
others if cwnd > ssthresh
1 RTT, cwnd +=1

fast retransmit
fast recovery -- reno
not wait RTO
ssthresh = cwnd/2
cwnd /= 2

selective acknowldegement, sack  -- newreno

Tahoe
Reno
NewReno
SACK


linux 2.6版的内核，网络数据从网线到应用程序需经过3次copy,分别是：
1. 网线上的电信号经过网卡驱动DMA到网卡的环形FIFO里；
2. 从网卡的接收环形FIFO里copy到TCP/IP协议栈的sk_buff里；
3. 应用程序的socket调用recv()函数从协议栈的buffer里copy到用户进程的buffer里。


Flow control
sliding window flow control protocol

window
expand ratio (16bit - 31 bit)
Option-Kind#1 | Option-Length#3 | Option-Data #4
option-kind = 3
Option-Data = 0 -14

theory
data in send buffer
category#1 sent and acknowledged
category#2 sent but not yet acknowledged
category#3 not sent recipient ready to receive
category#4 not sent recipoent NOT ready to receive

send window = category2+category3

ack sequence + window size = Max data sequence to be sent


slow start
----------
  - Linear additive increase takes too long to ramp up a new TCP connection from cold start.
  - Beginning with TCP Tahoe, the slow start mechanism was added to provide an initial exponential increase in the size of cwnd.
  - Remember mechanism by: slow start prevents a slow start. Moreover, slow start is slower than sending a full advertised window’s worth of packets all at once.

  - the source starts with cwnd = 1.
  - Every time an ACK arrives, cwnd is incremented.
  - cwnd is effectively doubled per RTT “epoch”.
  - Two slow start situations:
    -- At the very beginning of a connection {cold start}.
    -- When the connection goes dead waiting for a timeout to occur (i.e, the advertized window goes to zero!)

  - However, in the second case the source has more information. The current value of cwnd can be saved as a congestion threshold.
  - This is also known as the “slow start threshold” ssthresh.

slow start -- wait for timeout -- cwnd/2 -- slow start -- congestion avoidance

Fast Retransmit
---------------
  - Coarse timeouts remained a problem, and Fast retransmit was added with TCP Tahoe.
  - Since the receiver responds every time a packet arrives, this implies the sender will see duplicate ACKs.
  - Basic Idea:: use duplicate ACKs to signal lost packet.
  - Upon receipt of three duplicate ACKs, the TCP Sender retransmits the lost packet.

  - Generally, fast retransmit eliminates about half the coarse-grain timeouts.
  - This yields roughly a 20% improvement in throughput.
  - Note – fast retransmit does not eliminate all the timeouts due to small window sizes at the source.

Fast Recovery
-------------
  - Fast recovery was added with TCP Reno.
  - Basic idea:: When fast retransmit detects three duplicate ACKs, start the recovery process from congestion avoidance region and use ACKs in the pipe to pace the sending of packets.

    Algorithm Description
    ~~~~~~~~~~~~~~~~~~~~~
    The Fast-Recovery algorithm is implemented together with the Fast-Retransmit algorithm in the so-called Fast-Retransmit/Fast-Recovery algorithm
    
    The Fast-Retransmit/Fast-Recovery algorithm was introduced in 4.3BSD Reno release and is described in the RFC 2001 as follows:
    
    After receiving three duplicated ACKs in a row:
    
    -- Set ssthresh to half the current send window.
    -- Retransmit the missing segment
    -- Set cwnd=sshtresh+3.
    -- Each time the same duplicated ACK arrives, set cwnd++. Transmit a new packet, if allowed by cwnd.
    -- If a non-duplicated ACK arrives, then set cwnd = ssthresh and continue with a linear increase of the cwnd (Congestion-Avoidance

