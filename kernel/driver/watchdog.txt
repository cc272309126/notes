134 
135 static const struct watchdog_info wdt_info = {
136     .identity = "VIA watchdog",
137     .options =  WDIOF_CARDRESET |
138             WDIOF_SETTIMEOUT |
139             WDIOF_MAGICCLOSE |
140             WDIOF_KEEPALIVEPING,
141 };
142 
143 static const struct watchdog_ops wdt_ops = {
144     .owner =    THIS_MODULE,
145     .start =    wdt_start,
146     .stop =     wdt_stop,
147     .ping =     wdt_ping,
148     .set_timeout =  wdt_set_timeout,
149 };
150 
151 static struct watchdog_device wdt_dev = {
152     .info =     &wdt_info,
153     .ops =      &wdt_ops,
154     .min_timeout =  1,
155     .max_timeout =  WDT_TIMEOUT_MAX,
156 };
157 

start
stop
settimeout

Linux 自带了一个 watchdog 的实现，用于监视系统的运行，包括一个内核 watchdog module 和一个用户空间的 watchdog 程序。内核 watchdog 模块通过 /dev/watchdog 这个字符设备与用户空间通信。用户空间程序一旦打开 /dev/watchdog 设备（俗称“开门放狗”），就会导致在内核中启动一个1分钟的定时器（系统默认时间），此后，用户空间程序需要保证在1分钟之内向这个设备写入数据（俗称“定期喂狗”），每次写操作会导致重新设定定时器。如果用户空间程序在1分钟之内没有写操作，定时器到期会导致一次系统 reboot 操作（“狗咬人了”呵呵）。通过这种机制，我们可以保证系统核心进程大部分时间都处于运行状态，即使特定情形下进程崩溃，因无法正常定时“喂狗”，Linux系统在看门狗作用下重新启动（reboot），核心进程又运行起来了。多用于嵌入式系统。


