#define LOCAL_TIMER_VECTOR      0xef
alloc_intr_gate(LOCAL_TIMER_VECTOR, apic_timer_interrupt);
apic_timer_interrupt smp_apic_timer_interrupt
    local_apic_timer_interrupt
        evt->event_handler(evt);

tick_set_periodic_handler


x86_init
    .setup_percpu_clockev   = setup_boot_APIC_clock
        setup_APIC_timer
            clockevents_register_device
                tick_check_new_device
                    tick_setup_device
                        tick_setup_periodic / tick_setup_oneshot
                            tick_set_periodic_handler
                                dev->event_handler = tick_handle_periodic;
                                    tick_periodic
                                    
                                    
hpet
    tick_handle_oneshot_broadcast
    
lapic
    hrtimer_interrupt

apic_timer_interrupt


clock source
x86_init
    .timers | .timer_init       = hpet_time_init
        hpet_enable
            hpet_clocksource_register
                clocksource_register_hz
                    __clocksource_register_scale
                        clocksource_enqueue
                        clocksource_enqueue_watchdog
                        clocksource_select
                        
x86_late_time_init
    hpet_time_init
    tsc_init                
        .tsc_pre_init       = x86_init_noop

        
device_initcall(init_tsc_clocksource);
    clocksource_register_khz
        __clocksource_register_scale
        
jiffies is also a clock source

core_initcall(init_jiffies_clocksource);
    clocksource_register(&clocksource_jiffies);

fs_initcall(init_acpi_pm_clocksource);
    clocksource_register_hz(&clocksource_acpi_pm, PMTMR_TICKS_PER_SEC);

fs_initcall(clocksource_done_booting);
    
clocksource_select
    __clocksource_select
        timekeeping_notify
            change_clocksource


start_kernel()
  -> if (late_time_init)
           late_time_init()
           x86_late_time_init()
             -> hpet_time_init()
                  -> hpet_enable()
                       -> hpet_legacy_clockevent_register() / hpet_clocksource_register

clockevents_config_and_register(&hpet_clockevent, hpet_freq, HPET_MIN_PROG_DELTA, 0x7FFFFFFF);
clockevents_config_and_register(lapic_clockevent, (tsc_khz / TSC_DIVISOR) * 1000, 0xF, ~0UL);

clockevents_config_and_register
    clockevents_register_device
        tick_check_new_device
            tick_setup_device
                tick_setup_periodic
                    dev->event_handler = tick_handle_periodic;
                tick_setup_oneshot
                    
kernel_init()
  -> smp_prepare_cpus(setup_max_cpus)
     native_smp_prepare_cpus(64)
       -> x86_init.timers.setup_percpu_clockev()
          setup_boot_APIC_clock()
            -> setup_APIC_timer()
                 -> clockevents_register_device(levt)
                 

Clock Event Device: hpet
 event_handler:  tick_handle_oneshot_broadcast
Clock Event Device: lapic
 event_handler:  hrtimer_interrupt

tick_handle_periodic
tick_handle_periodic_broadcast
tick_handle_periodic
    tick_periodic
        update_process_times
            run_local_timers
                raise_softirq(TIMER_SOFTIRQ);

init_timers
    run_timer_softirq
        hrtimer_run_pending
            hrtimer_switch_to_hres
                tick_init_highres
                    tick_switch_to_oneshot(hrtimer_interrupt)
                        
irq0 / .handler = timer_interrupt
    global_clock_event->event_handler
    tick_handle_oneshot_broadcast / tick_setup_periodic
        
tick_periodic
    do_timer
    update_wall_time
    update_process_times


= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 


classical timer
    low-resolution timer
        jiffies
high-resolution timer 

clock source device
clock event device
tick device  

global timer
    hpet / pit
local timer
    local apic timer == hrtimer

init:
start_kernel
    time_init
        late_time_init = x86_late_time_init;
    late_time_init();
        hpet_time_init
            setup_irq(0, &irq0);
                timer_interrupt
                    global_clock_event->event_handler(global_clock_event);
                    
hpet_enable
    hpet_clocksource_register / hpet_legacy_clockevent_register
        clockevents_config_and_register
        global_clock_event = &hpet_clockevent;
            clockevents_register_device
                tick_check_new_device
                    tick_setup_device
                        tick_setup_periodic
                        tick_setup_oneshot
                            tick_set_periodic_handler
                                dev->event_handler = tick_handle_periodic;

tick_handle_periodic
    tick_periodic
        [do_timer
            jiffies_64 += ticks;
            calc_global_load
        update_wall_time] -- global timer cpu
        update_process_times -- local timer 
            run_local_timers
                hrtimer_run_queues
                raise_softirq(TIMER_SOFTIRQ);
                run_timer_softirq
                    __run_timers
            scheduler_tick
                curr->sched_class->task_tick
                
                
struct timer_list {
    struct list_head entry;
    unsigned long expires;
    struct tvec_base *base;
    void (*function)(unsigned long);
    unsigned long data;
};

struct timespec {
    __kernel_time_t tv_sec;         /* seconds */
    long        tv_nsec;        /* nanoseconds */
};

struct timeval {
    __kernel_time_t     tv_sec;     /* seconds */
    __kernel_suseconds_t    tv_usec;    /* microseconds */
};

union ktime {
    s64 tv64;
};
typedef union ktime ktime_t;    


struct clocksource {
    cycle_t (*read)(struct clocksource *cs);
    cycle_t mask;
    u32 mult;
    u32 shift;
    ...
    const char *name;
    struct list_head list;
    int rating;
    ...
    struct module *owner;
} ;

ns ~= (clocksource * mult) >> shift

struct clock_event_device {
    void            (*event_handler)(struct clock_event_device *);
    int         (*set_next_event)(unsigned long evt,
                          struct clock_event_device *);
    int         (*set_next_ktime)(ktime_t expires,
                          struct clock_event_device *);
    ktime_t         next_event;
    ...
};

enum tick_device_mode {
    TICKDEV_MODE_PERIODIC,
    TICKDEV_MODE_ONESHOT,
};
struct tick_device {
    struct clock_event_device *evtdev;
    enum tick_device_mode mode;
};

DECLARE_PER_CPU(struct tick_device, tick_cpu_device);
extern ktime_t tick_next_period; /* ns; next global event time */
extern ktime_t tick_period; /* tick_period * HZ = 1 second */
extern int tick_do_timer_cpu;   /* global timer */


tick_setup_device
    first timer on this cpu setup
        timer_boot_cpu
            tick_next_period
            tick_do_timer_cpu
        td->mode = TICKDEV_MODE_PERIODIC;
    tick_setup_periodic
    tick_setup_oneshot


broadcast
    HZ
        tick_handle_periodic_broadcast
        tick_handle_oneshot_broadcast
    noHZ
        tick_handle_oneshot_broadcast
eventHandler
    HZ
        tick_handle_periodic -- low resolution
        hrtimer_interrupt -- high resolution
    noHZ
        tick_nohz_handler -- low resolution
        hrtimer_interrupt -- high resolution 
        
hrtimer_interrupt ??
    afford the do_timer function ??
    
struct hrtimer_clock_base {
    struct hrtimer_cpu_base *cpu_base;
    int         index;
    clockid_t       clockid;
    struct timerqueue_head  active;
    ktime_t         resolution;
    ktime_t         (*get_time)(void);
    ktime_t         softirq_time;
    ktime_t         offset;
};

enum  hrtimer_base_type {
    HRTIMER_BASE_MONOTONIC,
    HRTIMER_BASE_REALTIME,
    HRTIMER_BASE_BOOTTIME,
    HRTIMER_BASE_TAI,
    HRTIMER_MAX_CLOCK_BASES,
};

struct hrtimer {
    struct timerqueue_node      node;
    ktime_t             _softexpires;
    enum hrtimer_restart        (*function)(struct hrtimer *);
    struct hrtimer_clock_base   *base;
    unsigned long           state;
};

hrtimer_init

* struct tick_sched - sched tick emulation and no idle tick control/stats
* @sched_timer: hrtimer to schedule the periodic tick in high resolution mode   
struct tick_sched {
    struct hrtimer          sched_timer;
    unsigned long           check_clocks;
    enum tick_nohz_mode     nohz_mode;
    ktime_t             last_tick;
    ...
};

hrtimer_switch_to_hres
    tick_setup_sched_timer
        ts->sched_timer.function = tick_sched_timer;
            tick_sched_do_timer
                tick_do_update_jiffies64
                    update_wall_time
            tick_sched_handle
                update_process_times
                profile_tick
                
