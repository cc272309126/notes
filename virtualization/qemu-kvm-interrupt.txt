qemu-kvm 中断虚拟化

中断注入
它是指将中断写入VMCS对应的中断信息位，来实现中断的注入。
首先中断注入有个一个标志性的函数 kvm_set_irq,这个是中断注入的最开始。

kvm_set_irq -- virt/kvm/irqchip.c
    if (irq < irq_rt->nr_rt_entries) /*检查中断请求号范围*/
        /*提取中断路由表中对应的中断路由实体，map[irq]是一个对应中断的路由实体表头结点，这里遍历它能够得到所有对应的路由实体。*/
        hlist_for_each_entry(e, &irq_rt->map[irq], link)
            irq_set[i++] = *e;
    rcu_read_unlock();

    while(i--) {
        int r;
        /* /*触发对应路由实体的触发函数，这个函数在之前的安装中断路由的时候已经注册，setup_routing_entry */
        r = irq_set[i].set(&irq_set[i], kvm, irq_source_id, level,
                   line_status);
        if (r < 0)
            continue;

        ret = r + ((ret < 0) ? 0 : ret);
    }

安装中断路由函数主要在setup_routing_entry中

setup_routing_entry
    kvm_set_routing_entry
    switch (ue->type) {
    case KVM_IRQ_ROUTING_IRQCHIP:
        delta = 0;
        switch (ue->u.irqchip.irqchip) {
        case KVM_IRQCHIP_PIC_MASTER:
            e->set = kvm_set_pic_irq;
            max_pin = PIC_NUM_PINS;
            break;
        case KVM_IRQCHIP_PIC_SLAVE:
            e->set = kvm_set_pic_irq;
            max_pin = PIC_NUM_PINS;
            delta = 8;
            break;
        case KVM_IRQCHIP_IOAPIC:
            max_pin = KVM_IOAPIC_NUM_PINS;
            e->set = kvm_set_ioapic_irq;
            break;
        default:
            goto out;
        }
        e->irqchip.irqchip = ue->u.irqchip.irqchip;
        e->irqchip.pin = ue->u.irqchip.pin + delta;
        if (e->irqchip.pin >= max_pin)
            goto out;
        rt->chip[ue->u.irqchip.irqchip][e->irqchip.pin] = ue->gsi;
        break;
    case KVM_IRQ_ROUTING_MSI:
        e->set = kvm_set_msi;
        e->msi.address_lo = ue->u.msi.address_lo;
        e->msi.address_hi = ue->u.msi.address_hi;
        e->msi.data = ue->u.msi.data;
        break;
    default:
        goto out;
    }
    
对于PIC来说
它主要是设置kvm里面的虚拟中断控制器结构体struct kvm_pic完成虚拟终端控制器的设置。如果是边缘触发，需要触发电瓶先0再1或者先1再0，完成一个正常的中断模拟。
对于IOAPIC来说
整个流程是先检查IOAPIC状态，如果符合注入条件，则组建中断结构体，发送到指定VCPU的LAPIC，设置LAPIC的寄存器，完成虚拟中断控制器设置。
对于MSI来说
就是将irq消息解析，然后构造发送给VCPU的LAPIC，后面和IOAPIC的相同。

kvm_set_ioapic_irq
    kvm_ioapic_set_irq
        ioapic_service
            ioapic_deliver
                kvm_irq_delivery_to_apic
                    kvm_irq_delivery_to_apic_fast
                        kvm_apic_set_irq
                            __apic_accept_irq
                                apic_set_irr
                                    apic_set_reg
                                    
                                    
当我们设置好虚拟中断控制器以后，接着在KVM_RUN退出以后，就开始遍历这些虚拟中断控制器，如果发现中断，就将中断写入中断信息位.
inject_pending_event在进入guest之前被调用。

vcpu_enter_guest
    inject_pending_event
    kvm_x86_ops->run(vcpu)

inject_pending_event
    kvm_x86_ops->set_irq == vmx_inject_irq
        vmcs_write32(VM_ENTRY_INTR_INFO_FIELD, intr)

什么时候触发这个kvm_set_irq的。当然中断需要模拟的时候就调用。这里调用分为两种。
1.可以直接在KVM中调用这个函数，如虚拟I8254
2.可以从QEMU中通过调用QEMU中的函数中断注入函数kvm_set_irq.

kvm_vm_ioctl
    case KVM_CREATE_VCPU:
        kvm_vm_ioctl_create_vcpu
    case KVM_SET_USER_MEMORY_REGION:
        kvm_vm_ioctl_set_memory_region
    ...
    case KVM_IRQ_LINE_STATUS:
    case KVM_IRQ_LINE:
        kvm_vm_ioctl_irq_line
            kvm_set_irq
            
            
Qemu-KVM Guest OS Time Tick Source 
qemu-kvm-0.12.4

QEMU timer emulation path:
main(vl.c) ---> init_timer_alarm(vl.c) ---> 
dynticks_start_timer ---> sigaction(SIGALARM, host_alarm_handler)
--> timer_create
(or ---> hpet_start_timer ---> open(/dev/hpet)
---> enable_sigio_timer --> sigaction(SIGIO, host_alarm_handler))



当dynticks timer到期后，内核发送一个SIGALARM信号给Qemu进程，之前介绍过，Qemu进程
block了SIGALARM信号，信号是由创建的signalfd去接受；之后，io thread用select检测到signalfd read ready，
然后就调用sigfd_handler；sigfd_handler根据signal number，调用相应的handler，就是之前用sigaction注册过的
host_alarm_handler。

通过研究hpet_start_timer，
发现原来这里是直接去调用hpet driver，使hpet硬件直接产生一个Qemu需要的时钟源。当hpet timer到期时，hpet
硬件发送一个interrupt给host，host hpet driver handler发现这个中断是由Qemu进程"引起"的，所以发送一个SIGIO
信号给Qemu进程。同样，在hpet_start_timer调用的enable_sigio_timer函数中用sigaction注册host_alarm_handler
为SIGIO信号的handler。rtc也跟hpet是一样的，实际上是去调用rtc driver。

可以发现dynticks是利用软件timer提供时钟计数，而hpet和rtc是直接利用硬件提供时钟计数。现在可以总结
一下Linux下的各种timer服务了：

首先，内核态程序可以直接使用hrtimer API来使用timer，可以到期时可直接执行回调函数。至于hrtimer可以使利用
hpet，也可以是利用local APIC timer去实现的。

其次，用户态程序可以有三大类timer服务——第一类是，nanosleep()、sleep()这样的系统调用，内核
实际上在内核创建一个临时的timer，当到期时将用户进程唤醒；第二类是，Posix Timer API，内核实现
上是用hrtimer来实现Posix Timer的，当到期时将发送一个SIGALARM信号给用户进程；第三类是，
/dev/hpet和/dev/rtc，即直接利用硬件timer，因为这些硬件timer可以支持很多个不同频率的timer，所以
用户进程可以直接使用其中的一个，当到期时内核将发送SIGIO信号给应用进程。


static struct qemu_alarm_timer alarm_timers[] = {
    {"dynticks", ALARM_FLAG_DYNTICKS, dynticks_start_timer,
     dynticks_stop_timer, dynticks_rearm_timer, NULL},
    /* HPET - if available - is preferred */
    {"hpet", 0, hpet_start_timer, hpet_stop_timer, NULL, NULL},
    /* ...otherwise try RTC */
    {"rtc", 0, rtc_start_timer, rtc_stop_timer, NULL, NULL},
}


static int init_timer_alarm(void)
{
    for (i = 0; alarm_timers[i].name; i++) {
        t = &alarm_timers[i];
        err = t->start(t);
        if (!err)
            break;
    }
}

static int dynticks_start_timer(struct qemu_alarm_timer *t)
{
    struct sigevent ev;
    timer_t host_timer;
    struct sigaction act;

    sigfillset(&act.sa_mask);
    act.sa_flags = 0;
    act.sa_handler = host_alarm_handler;

    sigaction(SIGALRM, &act, NULL);

    /*
     * Initialize ev struct to 0 to avoid valgrind complaining
     * about uninitialized data in timer_create call
     */
    memset(&ev, 0, sizeof(ev));
    ev.sigev_value.sival_int = 0;
    ev.sigev_notify = SIGEV_SIGNAL;
    ev.sigev_signo = SIGALRM;

    if (timer_create(CLOCK_REALTIME, &ev, &host_timer)) {
        perror("timer_create");

        /* disable dynticks */
        fprintf(stderr, "Dynamic Ticks disabled\n");

        return -1;
    }

    t->priv = (void *)(long)host_timer;

    return 0;
}

static int hpet_start_timer(struct qemu_alarm_timer *t)
{
    struct hpet_info info;
    int r, fd;

    fd = qemu_open("/dev/hpet", O_RDONLY);
    if (fd < 0)
        return -1;

    /* Set frequency */
    r = ioctl(fd, HPET_IRQFREQ, RTC_FREQ);
    if (r < 0) {
        fprintf(stderr, "Could not configure '/dev/hpet' to have a 1024Hz timer. This is not a fatal\n"
                "error, but for better emulation accuracy type:\n"
                "'echo 1024 > /proc/sys/dev/hpet/max-user-freq' as root.\n");
        goto fail;
    }

    /* Check capabilities */
    r = ioctl(fd, HPET_INFO, &info);
    if (r < 0)
        goto fail;

    /* Enable periodic mode */
    r = ioctl(fd, HPET_EPI, 0);
    if (info.hi_flags && (r < 0))
        goto fail;

    /* Enable interrupt */
    r = ioctl(fd, HPET_IE_ON, 0);
    if (r < 0)
        goto fail;

    enable_sigio_timer(fd);
    t->priv = (void *)(long)fd;

    return 0;
fail:
    close(fd);
    return -1;
}

static void enable_sigio_timer(int fd)
{
    struct sigaction act;

    /* timer signal */
    sigfillset(&act.sa_mask);
    act.sa_flags = 0;
    act.sa_handler = host_alarm_handler;

    sigaction(SIGIO, &act, NULL);
    fcntl_setfl(fd, O_ASYNC);
    fcntl(fd, F_SETOWN, getpid());
}

 qemu-kvm 中断虚拟化代码分析 

硬件中断发生（qemu模拟设备）
1.硬件产生中断的接口
void qemu_set_irq(qemu_irq irq, int level);

2.中断过程
void qemu_set_irq(qemu_irq irq, int level)
{
    if (!irq)
        return;
    irq->handler(irq->opaque, irq->n, level);
}

设置中断控制器hander，大致分为三种情况
1.cpu_irq的hander===> pic_irq_request
2.内核模拟中断控制器的hander===>kvm_i8259_set_irq
3.用户模拟中断控制器的hander===>i8259_set_irq

static void pc_init1(MachineState *machine,
                     int pci_enabled,
                     int kvmclock_enabled)
{
    ...
    if (kvm_irqchip_in_kernel()) {
        i8259 = kvm_i8259_init(isa_bus);
    } else if (xen_enabled()) {
        i8259 = xen_interrupt_controller_init();
    } else {
        cpu_irq = pc_allocate_cpu_irq();
        i8259 = i8259_init(isa_bus, cpu_irq[0]);
    }   
    ...
}                    

先研究用户空间中断控制器的中断发生过程
type_init(pic_register_types)
    type_register_static(&i8259_info);
        static const TypeInfo i8259_info = {
            .class_init = i8259_class_init,
        };  
            dc->realize = pic_realize;
                qdev_init_gpio_in(dev, pic_set_irq, 8);
                    pic_update_irq
                        qemu_irq_raise
                            qemu_set_irq
                            
注入中断时机由qemu_irq_raise触发的
cpu_irq = pc_allocate_cpu_irq();
    pic_irq_request
        cpu_interrupt
        
中断注入
中断注入负责将虚拟中断控制器采集的中断请求注入到虚拟处理器。需要处理两个问题，什么时候注入，如何注入？
什么时候注入
vcpu thread    ---> ap_main_loop(qemu-kvm.c)   --> kvm_main_loop_cpu
ap_main_loop
    kvm_main_loop_cpu
        kvm_cpu_exec
            kvm_run
                如果中断控制器不是内核空间模拟（用户空间模拟），进行中断注入。
                if (!kvm->irqchip_in_kernel) run->request_interrupt_window = kvm_arch_try_push_interrupts(env);

1.首先满足三个条件
1）内核kvm准备好了接受中断注入
2）有中断请求并且为硬件中断请求
3）虚拟处理器运行中断（开中断）
2.获取中断请求号
3.kvm注入中断请求
kvm_arch_try_push_interrupts
        if (kvm_is_ready_for_interrupt_injection(env) &&
        (env->interrupt_request & CPU_INTERRUPT_HARD) &&
        (env->eflags & IF_MASK)) {
            env->interrupt_request &= ~CPU_INTERRUPT_HARD;
        irq = cpu_get_pic_interrupt(env);
        if (irq >= 0) {
            kvm_inject_irq(env, irq);
        }
    }

如何注入
kvm_inject_irq
     kvm_vcpu_ioctl(env, KVM_INTERRUPT, &intr);

qemu-2.2.0 流程
x86_cpu_realizefn
    qemu_init_vcpu
        if (kvm_enabled()) {
            qemu_kvm_start_vcpu(cpu);
        } else if (tcg_enabled()) {
            qemu_tcg_init_vcpu(cpu);
        } else {
            qemu_dummy_start_vcpu(cpu);
        }
        
        qemu_kvm_start_vcpu
            qemu_thread_create(cpu->thread, thread_name, qemu_kvm_cpu_thread_fn, cpu, QEMU_THREAD_JOINABLE);
            qemu_kvm_cpu_thread_fn
                kvm_init_vcpu
                    kvm_vm_ioctl(s, KVM_CREATE_VCPU, (void *)kvm_arch_vcpu_id(cpu));
                    while (1) {
                    if (cpu_can_run(cpu)) {
                        r = kvm_cpu_exec(cpu);
                            if (r == EXCP_DEBUG) {
                                cpu_handle_guest_debug(cpu);
                            }
                        }
                        qemu_kvm_wait_io_event(cpu);
                    }
                    kvm_cpu_exec
                        kvm_arch_process_async_events
                            
    
内核空间中断采集
中断控制器由两种8259和apic，这两个设备在用户空间模拟过程，在上面已分析。接下来看一下在内核态模拟，我们暂且称之为内核空间中断采集。
内核态模拟，上面kvm_set_irq已经分析


