qemu vm run 
====================

qemu_kvm_cpu_thread_fn
    kvm_init_vcpu
        kvm_vm_ioctl(KVM_CREATE_VCPU)
    while (1) {
        if (cpu_can_run(cpu)) {
            r = kvm_cpu_exec(cpu);
            if (r == EXCP_DEBUG) {
                cpu_handle_guest_debug(cpu);
            }
        }
        qemu_kvm_wait_io_event(cpu);
    }
    
kvm_cpu_exec
    kvm_arch_process_async_events
    do {
        kvm_arch_pre_run(cpu, run);
        qemu_mutex_unlock_iothread();
        run_ret = kvm_vcpu_ioctl(cpu, KVM_RUN, 0);
        qemu_mutex_lock_iothread();
        kvm_arch_post_run(cpu, run);

        if (run_ret < 0) {
            break;
        }

        switch (run->exit_reason) {
        case KVM_EXIT_IO:
            kvm_handle_io(run->io.port,
                          (uint8_t *)run + run->io.data_offset,
                          run->io.direction,
                          run->io.size,
                          run->io.count);
            ret = 0;
            break;
        case KVM_EXIT_MMIO:
            cpu_physical_memory_rw(run->mmio.phys_addr,
                                   run->mmio.data,
                                   run->mmio.len,
                                   run->mmio.is_write);
            ret = 0;
            break;
        case KVM_EXIT_IRQ_WINDOW_OPEN:
            ret = EXCP_INTERRUPT;
            break;
        case KVM_EXIT_SHUTDOWN:
            qemu_system_reset_request();
            ret = EXCP_INTERRUPT;
            break;
        case KVM_EXIT_UNKNOWN:
            ret = -1;
            break;
        case KVM_EXIT_INTERNAL_ERROR:
            ret = kvm_handle_internal_error(cpu, run);
            break;
        case KVM_EXIT_SYSTEM_EVENT:
            switch (run->system_event.type) {
            case KVM_SYSTEM_EVENT_SHUTDOWN:
                qemu_system_shutdown_request();
                ret = EXCP_INTERRUPT;
                break;
            case KVM_SYSTEM_EVENT_RESET:
                qemu_system_reset_request();
                ret = EXCP_INTERRUPT;
                break;
            default:
                ret = kvm_arch_handle_exit(cpu, run);
                break;
            }
            break;
        default:
            ret = kvm_arch_handle_exit(cpu, run);
            break;
        }
    } while (ret == 0); 
    
kvm_handle_io
    address_space_rw(address_space_io)

cpu_physical_memory_rw
    address_space_rw(address_space_memory)  
    

    
KVM vm run 
====================

kvm_vcpu_ioctl
    case KVM_RUN:
    r = kvm_arch_vcpu_ioctl_run(vcpu, vcpu->run);       
        r = __vcpu_run(vcpu);
            
__vcpu_run
    while (r > 0) {
        if (vcpu->arch.mp_state == KVM_MP_STATE_RUNNABLE && !vcpu->arch.apf.halted)
            r = vcpu_enter_guest(vcpu);
        if (r <= 0)
            break;

        clear_bit(KVM_REQ_PENDING_TIMER, &vcpu->requests);
        if (kvm_cpu_has_pending_timer(vcpu))
            kvm_inject_pending_timer_irqs(vcpu);
    }
    
vcpu_enter_guest
    kvm_check_request
    kvm_mmu_reload
    preempt_disable
    kvm_x86_ops->run(vcpu);
    kvm_x86_ops->handle_external_intr(vcpu);
    preempt_enable
    r = kvm_x86_ops->handle_exit(vcpu);
    return r;

